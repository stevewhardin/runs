end = 30,
size = 0.2,
histnorm = 'count'))
rtplot <- list(
x = rt,
type = 'histogramx',
name = 'control',
marker = list(  note
color = 'fuchsia',
opacity = 0.75,
line = list(
color = 'grey',
width = 0)),
autobinx = FALSE,
xbins = list(
start = 1,
end = 30,
size = 0.2,
histnorm = 'count'))
rtplot <- list(
x = rt,
type = 'histogramx',
name = 'control',
marker = list(  note
color = 'fuchsia',
opacity = 0.75,
line = list(
color = 'grey',
width = 0)),
autobinx = FALSE,
xbins = list(
start = 1,
end = 30,
size = 0.2,
histnorm = 'count'))
rtplot <- list(
x = rt,
type = 'histogramx',
name = 'control',
marker = list(
color = 'fuchsia',
opacity = 0.75,
line = list(
color = 'grey',
width = 0)),
autobinx = FALSE,
xbins = list(
start = 1,
end = 30,
size = 0.2,
histnorm = 'count'))
layout <- list(
barmode = 'overlay',
bargap = 0.25,
bargroupgap = 0.3, note
bardir = 'v', options
title = 'Sampled Results',
xaxis = list(title='Value'),
yaxis = list(title='Count'))
p2<- plotly(username="stevewhardin", key="l9itud8moi")
response2 <- p2$plotly(rtplot, kwargs=list(layout=layout))
url2 <- response2$url
filename2 <- response2$filename
url2
layout <- list(
barmode = 'overlay',
bargap = 0.25,
bargroupgap = 0.3, note
bardir = 'v', options
title = 'Sampled Results',
xaxis = list(title='Value'),
yaxis = list(title='Count'))
layout <- list(
barmode = 'overlay',
bargap = 0.25,
bargroupgap = 0.3,
bardir = 'v',
title = 'Sampled Results',
xaxis = list(title='Value'),
yaxis = list(title='Count'))
p2<- plotly(username="stevewhardin", key="l9itud8moi")
response2 <- p2$plotly(rtplot, kwargs=list(layout=layout))
url2 <- response2$url
filename2 <- response2$filename
url2
filename2
tplot <- list(
x = rt,
type = 'histogramx',
name = 'control',
marker = list(
#               color = 'fuchsia',
#               opacity = 0.75,
line = list(
color = 'grey',
width = 0)),
autobinx = FALSE,
xbins = list(
start = 1,
end = 30,
size = 0.2,
histnorm = 'count'))
layout <- list(
#  barmode = 'overlay',
# bargap = 0.25,
#  bargroupgap = 0.3,
# bardir = 'v',
title = 'Fire Response Times',
xaxis = list(title='Response Time'),
yaxis = list(title='Count'))
p2<- plotly(username="stevewhardin", key="l9itud8moi")
response2 <- p2$plotly(rtplot, kwargs=list(layout=layout))
url2 <- response2$url
filename2 <- response2$filename
url2
rm(rtplot)
View(allruns)
allruns[allruns$response_time > 15]
allruns$nresponse_time <- as.numeric(as.character(allruns$response_time))
allruns[allruns$nresponse_time > 15]
allruns$nresponse_time
allruns[which(allruns$nresponse_time > 15)]
allruns[which(allruns$nresponse_time > 15)]
allruns[which(allruns$nresponse_time > 15)]
allruns$nres
allruns$nresponse_time
allruns[which(allruns$nresponse_time > 15)]
allruns[ which(allruns$nresponse_time > 15)]
allruns[allruns$nresponsetime]
allruns[which(allruns$nresponsetime > 15)]
allruns[which(allruns$nresponsetime > 15),]
allruns[which(allruns$nresponsetime > 15),]
allruns$nresponsetime
allruns$nresponse_time
allruns[which(allruns$nresponse_time > 15),]
rt <- as.numeric(as.character(allruns$response_time))
#Bad form
allruns$nresponse_time <- as.numeric(as.character(allruns$response_time))
timeranges <- table(cut(rt, breaks=c(0,1,2,3,4,5,6,7,8,9,10)))
timeranges
#html output for documentation
quantile(timeranges)
quantile(rt)
table.prop(rt)
table.margine(rt)
table.margin(rt)
timeranges
str(timeranges)
describe(allruns)
summar(allruns)
summary(allruns)
describe(allruns$nresponse_time)
xtable(describe(allruns$nresponse_time), type="html")
print(xtable(describe(allruns$nresponse_time), type="html"))
print(xtable(describe(allruns$nresponse_time)), type="html"))
print(xtable(describe(allruns$nresponse_time), type="html"))
print(xtable(describe(allruns$nresponse_time), type="html")
)
describe(allruns$nresponse_time)
desc <- describe(allruns$nresponse_time)
xtable(desc, type="html")
print.xtable(desc, type="html")
print(xtable(desc, type="html"))
print(xtable(at, type="html"))
print(xtable(desc, type="html"))
print(xtable(tb, type="html"))
print(xtable(upperranges), type="html")
print(xtable(timeranges), type="html")
print(xtable(desc), type="html")
print(xtable(desc), type="html")
desc
quantiles(rt)
quantile(rt)
rtplot <- list(
x = rt,
type = 'histogramx',
name = 'control',
marker = list(
#               color = 'fuchsia',
#               opacity = 0.75,
line = list(
color = 'grey',
width = 0)),
autobinx = FALSE,
xbins = list(
start = 1,
end = 30,
size = 0.2,
histnorm = 'count'))
layout <- list(
#  barmode = 'overlay',
# bargap = 0.25,
#  bargroupgap = 0.3,
# bardir = 'v',
title = 'Fire Response Times',
xaxis = list(title='Response Time'),
yaxis = list(title='Count'))
p2<- plotly(username="stevewhardin", key="l9itud8moi")
response2 <- p2$plotly(rtplot, kwargs=list(layout=layout))
url2 <- response2$url
filename2 <- response2$filename
url2
desc
data <- list(
x = days,
y = hrs,
#  z = dtbl, type = 'heatmap')
z = dtbl)
scl <- brewer.pal(9,'YlOrBr')
data <- list(
x = x,
y = y,
z = z,
scl= list(
c(0,"rgb(128, 0, 38)"),
c(0.125,"rgb(189, 0, 38)"),
c(0.25,"rgb(227, 26, 28)"),
c(0.375,"rgb(252, 78, 42)"),
c(0.5,"rgb(253, 141, 60)"),
c(0.625,"rgb(254, 178, 76)"),
c(0.75,"rgb(254, 217, 118)"),
c(0.875,"rgb(255, 237, 160)"),
c(1,"rgb(255, 255, 204)")
),
type = 'heatmap')
p1 <- plotly(username="stevewhardin", key="l9itud8moi")
response1 <- p1$plotly(data)
# url and filename
url1 <- response1$url
filename1 <- response1$filename1
url1
dtbl
scl <- brewer.pal(9,'YlOrBr')
data <- list(
x = x,
y = y,
z = dtbl,
scl= list(
c(0,"rgb(128, 0, 38)"),
c(0.125,"rgb(189, 0, 38)"),
c(0.25,"rgb(227, 26, 28)"),
c(0.375,"rgb(252, 78, 42)"),
c(0.5,"rgb(253, 141, 60)"),
c(0.625,"rgb(254, 178, 76)"),
c(0.75,"rgb(254, 217, 118)"),
c(0.875,"rgb(255, 237, 160)"),
c(1,"rgb(255, 255, 204)")
),
type = 'heatmap')
p1 <- plotly(username="stevewhardin", key="l9itud8moi")
response1 <- p1$plotly(data)
# url and filename
url1 <- response1$url
filename1 <- response1$filename1
url1
scl <- brewer.pal(9,'YlOrBr')
data <- list(
x = x,
y = y,
z = dtbl,
scl= list(
c(0,"rgb(128, 0, 38)"),
c(0.125,"rgb(189, 0, 38)"),
c(0.25,"rgb(227, 26, 28)"),
c(0.375,"rgb(252, 78, 42)"),
c(0.5,"rgb(253, 141, 60)"),
c(0.625,"rgb(254, 178, 76)"),
c(0.75,"rgb(254, 217, 118)"),
c(0.875,"rgb(255, 237, 160)"),
c(1,"rgb(255, 255, 204)")
),
type = 'heatmap')
p1 <- plotly(username="stevewhardin", key="l9itud8moi")
response1 <- p1$plotly(data)
# url and filename
url1 <- response1$url
filename1 <- response1$filename1
url1
scl <- brewer.pal(9,'YlOrBr')
data <- list(
x = days,
y = hrs,
z = dtbl,
scl= list(
c(0,"rgb(128, 0, 38)"),
c(0.125,"rgb(189, 0, 38)"),
c(0.25,"rgb(227, 26, 28)"),
c(0.375,"rgb(252, 78, 42)"),
c(0.5,"rgb(253, 141, 60)"),
c(0.625,"rgb(254, 178, 76)"),
c(0.75,"rgb(254, 217, 118)"),
c(0.875,"rgb(255, 237, 160)"),
c(1,"rgb(255, 255, 204)")
),
type = 'heatmap')
p1 <- plotly(username="stevewhardin", key="l9itud8moi")
response1 <- p1$plotly(data)
# url and filename
url1 <- response1$url
filename1 <- response1$filename1
url1
allruns$nresponse_time
year(allruns$date)
allruns2009 <- allruns[ which(year(allrun$date)) == 2009]
allruns2009 <- allruns[ which(year(allruns$date)) == 2009]
allruns2009 <- allruns[ which(year(allruns$date) == 2009),]
describe(allruns2009)
describe(allruns2009$nresponse_time)
allruns2010 <- allruns[ which(year(allruns$date) == 2010),]
describe(allruns2010$nresponse_time)
allruns2011 <- allruns[ which(year(allruns$date) == 2011),]
describe(allruns2011$nresponse_time)
allruns2012 <- allruns[ which(year(allruns$date) == 2012),]
describe(allruns2012$nresponse_time)
allruns2013 <- allruns[ which(year(allruns$date) == 2013),]
describe(allruns2013$nresponse_time)
plot2009 <- ggplot(allruns2009, aes(x=nresponse_time))
plot2009 + geom_histogram(fill="white", colour="black")
plot2009 + geom_histogram(binwidth = 5,fill="white", colour="black")
plot2009 + geom_histogram(binwidth = 100 ,fill="white", colour="black")
plot2009 + geom_histogram(binwidth = 20 ,fill="white", colour="black")
plot2009 + geom_histogram(binwidth=20,fill="white", colour="black")
plot2009 + geom_histogram(binwidth=30, fill="white", colour="black")
plot2009
plot2009 + geom_histogram(fill="white", colour="black")
plot2009 + geom_abline(intercept=4, slope=0, colour="red")
plot2009 <- geom_vline(xintercept=1:5, colour="red")
plot2009 + geom_histogram(binwidth=30, fill="white", colour="black")
plot2009 <- ggplot(allruns2009, aes(x=nresponse_time))
plot2009 + geom_histogram(fill="white", colour="black")
plot2009 + geom_vline(xintercept=1:5, colour="red")
plot2009 + geom_vline(xintercept=5, colour="red")
plot2009
plot2009 <- ggplot(allruns2009, aes(x=nresponse_time))
plot2009 + geom_histogram(fill="white", colour="black") + geom_vline(xintercept=4)
plot2009 <- ggplot(allruns2009, aes(x=nresponse_time))
plot2009 + geom_histogram(fill="white", colour="black") + geom_vline(xintercept=4, colour="red")
plot2009 <- ggplot(allruns2009, aes(x=nresponse_time))
plot2009 + geom_histogram(fill="white", colour="black") + geom_vline(xintercept=4, colour="red") + geom_vline(xintercept=10, colour="red")
source('~/Dropbox/work/r/runs/runs.R')
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
source('~/Dropbox/work/r/runs/historicdata.R')
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
qts
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
allruns2009
allruns2009
allruns2009$nresponse_time
xtable.print(allruns2009$nresponse_time)
xtable(allruns2009$nresponse_time)
table(allruns2009$nresponse_time)
puke<- (table(allruns2009$nresponse_time))
as.data.frame(puke)
write.csv(puke, file=Test.csv)
write.csv(puke, file="Test.csv")
upperranges <- table(cut(allruns2009$nresponse_time, seq(from= 0, to = 38, by = 1 )))
upperranges
allruns2009 <- allruns[ which(year(allruns$date) == 2009),]
qts <- quantile(allruns2009$nresponse_time, probs=c(.0, .1, .2, .3, .4, .5, .6, .7, .8, .90), na.rm = TRUE)
qts
allruns2009 <- allruns[ which(year(allruns$date) == 2009),]
qts <- quantile(allruns2009$nresponse_time, probs=c(.0, .1, .2, .34, .4, .5, .6, .7, .8, .90), na.rm = TRUE)
qts
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
qts
print(xtable(qts), type="html")
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
library(grid)
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
grid.arrange()
library(gridextra)
install.packages(gridextra)
install.packages("gridextra")
install.packages("gridExtra")
library(gridExtra)
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
print("2009")
allruns2009 <- allruns[ which(year(allruns$date) == 2009),]
qts <- quantile(allruns2009$nresponse_time, probs=c(.0, .1, .2, .3, .4, .5, .6, .7, .8, .90), na.rm = TRUE)
#qts <- quantile(allruns2009$nresponse_time, probs=c(.0, .90), na.rm = TRUE)
print(qts)
ranges <- table(cut(allruns2009$nresponse_time, seq(from= 0, to = 38, by = 1 )))
print(ranges)
desc <- describe(allruns2009$nresponse_time)
print(desc)
#print html
#print(xtable(ranges), type="html")
#print(xtable(qts), type="html")
#print(xtable(desc), type="html")
plot2009 <- ggplot(allruns2009, aes(x=nresponse_time))
plot2009 + geom_histogram(fill="white", colour="black") + geom_vline(xintercept=qts[1], colour="red") + geom_vline(xintercept=qts[10], colour="red") +
ggtitle("2009 Runs") + xlab("Response Time in Minutes") + ylab("Number of Runs")
#2010
print("2010")
allruns2010 <- allruns[ which(year(allruns$date) == 2010),]
qts <- quantile(allruns2010$nresponse_time, probs=c(.0, .1, .2, .3, .4, .5, .6, .7, .8, .90), na.rm = TRUE)
print(qts)
ranges <- table(cut(allruns2010$nresponse_time, seq(from= 0, to = 38, by = 1 )))
print(ranges)
desc <- describe(allruns2010$nresponse_time)
print(desc)
#print html
# print(xtable(ranges), type="html")
#print(xtable(qts), type="html")
#print(xtable(desc), type="html")
plot2010 <- ggplot(allruns2010, aes(x=nresponse_time))
plot2010 + geom_histogram(fill="white", colour="black") + geom_vline(xintercept=qts[1], colour="red") + geom_vline(xintercept=qts[10], colour="red") +
ggtitle("2010 Runs") + xlab("Response Time in Minutes") + ylab("Number of Runs")
png("histograms.png")
grid.arrange(plot2009, plot2010, ncol=2)
dev.off()
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
plot2010
plot2009
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
dev.off()
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
#Plot histograms of historic data
source("historicdata.R")
plotdata(allruns)
#end historick data
class(plot2009)
